CCS PCM C Compiler, Version 4.130, 5967               10-Jan-13 20:36

               Filename: E:\NAVEED\SAY2\DS18B20 Control Using 16F676\main.lst

               ROM used: 1012 words (99%)
                         Largest free fragment is 12
               RAM used: 23 (36%) at main() level
                         37 (58%) worst case
               Stack:    3 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
0004:  CALL   3FF
0005:  BSF    03.5
0006:  MOVWF  10
0007:  MOVLW  00
0008:  MOVWF  0A
0009:  GOTO   1D1
.................... #include <main.h> 
.................... #include <16F676.h> 
.................... //////// Standard Header file for the PIC16F676 device //////////////// 
.................... #device PIC16F676 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #define Lo(param) ((char *)&param)[0] 
.................... #define Hi(param) ((char *)&param)[1] 
.................... #define Higher(param) ((char *)&param)[2] 
.................... #define Highest(param) ((char *)&param)[3] 
....................  
.................... #define lo(param) ((char *)&param)[0] 
.................... #define hi(param) ((char *)&param)[1] 
.................... #define higher(param) ((char *)&param)[2] 
.................... #define highest(param) ((char *)&param)[3] 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES INTRC_IO                       //Internal RC Osc, no CLKOUT 
.................... #FUSES NOMCLR                   //Master Clear pin used for I/O 
.................... #FUSES NOBROWNOUT               //No brownout reset 
....................  
.................... //#use standard_io(A) 
.................... #use delay(INT=4Mhz) 
*
006A:  MOVLW  3E
006B:  MOVWF  04
006C:  MOVF   00,W
006D:  BTFSC  03.2
006E:  GOTO   07D
006F:  MOVLW  01
0070:  MOVWF  21
0071:  CLRF   20
0072:  DECFSZ 20,F
0073:  GOTO   072
0074:  DECFSZ 21,F
0075:  GOTO   071
0076:  MOVLW  4A
0077:  MOVWF  20
0078:  DECFSZ 20,F
0079:  GOTO   078
007A:  GOTO   07B
007B:  DECFSZ 00,F
007C:  GOTO   06F
007D:  RETURN
....................  
.................... //#use rs232(baud=2400, xmit=PIN_A5,rcv=PIN_A4) 
....................  
.................... #define DATA_HIGH    output_high(PIN_C3) 
.................... #define DATA_LOW     output_low(PIN_C3) 
....................  
.................... #define CLOCK_HIGH   output_high(PIN_C4) 
.................... #define CLOCK_LOW    output_low(PIN_C4) 
....................  
.................... #define ENABLE_HIGH  output_high(PIN_C5) 
.................... #define ENABLE_LOW   output_low(PIN_C5) 
.................... //============================================================================== 
.................... #ifndef unit_on 
.................... #define unit_on    output_LOW (PIN_C0); 
.................... #define unit_off   output_HIGH(PIN_C0); 
....................  
.................... #define ten_on     output_LOW (PIN_C1); 
.................... #define ten_off    output_HIGH(PIN_C1); 
....................  
.................... #define thu_on     output_LOW (PIN_C2); 
.................... #define thu_off    output_HIGH(PIN_C2); 
.................... #endif 
.................... //============================================================================== 
....................  
.................... #define relay_on     output_low  (PIN_A1); 
.................... #define relay_off    output_high (PIN_A1); 
....................  
.................... #define SET_button    INPUT_STATE(PIN_A2) 
.................... #define UP_button     INPUT_STATE(PIN_A3) 
.................... #define DOWN_button   INPUT_STATE(PIN_A4) 
....................  
.................... #byte   TRISAbits    = getenv("SFR:TRISA") 
.................... #bit    TRISA_B0     = TRISAbits.0 
....................  
.................... #include <ONE_wire.c> 
.................... // (C) copyright 2003 j.d.sandoz / jds-pic !at! losdos.dyndns.org 
....................  
.................... // released under the GNU GENERAL PUBLIC LICENSE (GPL) 
.................... // refer to http://www.gnu.org/licenses/gpl.txt 
....................  
.................... // This program is free software; you can redistribute it and/or modify 
.................... // it under the terms of the GNU General Public License as published by 
.................... // the Free Software Foundation; either version 2 of the License, or 
.................... // (at your option) any later version. 
....................  
.................... // This program is distributed in the hope that it will be useful, 
.................... // but WITHOUT ANY WARRANTY; without even the implied warranty of 
.................... // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
.................... // GNU General Public License for more details. 
....................  
.................... // You should have received a copy of the GNU General Public License 
.................... // along with this program; if not, write to the Free Software 
.................... // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
....................  
.................... /***********************1Wire Class***********************/ 
.................... /*Description: This class handles all communication */ 
.................... /* between the processor and the 1wire */ 
.................... /* sensors. 
.................... /*********************************************************/ 
....................  
.................... /*-------1-wire definitions-------*/ 
.................... #define ONE_WIRE_PIN PIN_A0 
....................  
.................... /*******************1-wire communication functions********************/ 
....................  
.................... /************onewire_reset*************************************************/ 
.................... /*This function initiates the 1wire bus */ 
.................... /* */ 
.................... /*PARAMETERS: */ 
.................... /*RETURNS: */ 
.................... /*********************************************************************/ 
....................  
.................... void onewire_reset()  // OK if just using a single permanently connected device 
.................... { 
....................  output_low(ONE_WIRE_PIN); 
*
0110:  BSF    03.5
0111:  BCF    05.0
0112:  BCF    03.5
0113:  BCF    05.0
....................  delay_us( 500 ); // pull 1-wire low for reset pulse 
0114:  MOVLW  A6
0115:  MOVWF  20
0116:  DECFSZ 20,F
0117:  GOTO   116
0118:  NOP
....................  output_float(ONE_WIRE_PIN); // float 1-wire high 
0119:  BSF    03.5
011A:  BSF    05.0
....................  delay_us( 500 ); // wait-out remaining initialisation window. 
011B:  MOVLW  A6
011C:  BCF    03.5
011D:  MOVWF  20
011E:  DECFSZ 20,F
011F:  GOTO   11E
0120:  NOP
....................  output_float(ONE_WIRE_PIN); 
0121:  BSF    03.5
0122:  BSF    05.0
.................... } 
0123:  BCF    03.5
0124:  RETURN
....................  
.................... /*********************** onewire_write() ********************************/ 
.................... /*This function writes a byte to the sensor.*/ 
.................... /* */ 
.................... /*Parameters: byte - the byte to be written to the 1-wire */ 
.................... /*Returns: */ 
.................... /*********************************************************************/ 
....................  
.................... void onewire_write(int data) 
.................... { 
....................  int count; 
....................  
....................  for (count=0; count<8; ++count) 
0125:  CLRF   3F
0126:  MOVF   3F,W
0127:  SUBLW  07
0128:  BTFSS  03.0
0129:  GOTO   144
....................  { 
....................   output_low(ONE_WIRE_PIN); 
012A:  BSF    03.5
012B:  BCF    05.0
012C:  BCF    03.5
012D:  BCF    05.0
....................   delay_us( 2 ); // pull 1-wire low to initiate write time-slot. 
012E:  GOTO   12F
....................   output_bit(ONE_WIRE_PIN, shift_right(&data,1,0)); // set output bit on 1-wire 
012F:  BCF    03.0
0130:  RRF    3E,F
0131:  BTFSC  03.0
0132:  GOTO   135
0133:  BCF    05.0
0134:  GOTO   136
0135:  BSF    05.0
0136:  BSF    03.5
0137:  BCF    05.0
....................   delay_us( 60 ); // wait until end of write slot. 
0138:  MOVLW  13
0139:  BCF    03.5
013A:  MOVWF  20
013B:  DECFSZ 20,F
013C:  GOTO   13B
013D:  GOTO   13E
....................   output_float(ONE_WIRE_PIN); // set 1-wire high again, 
013E:  BSF    03.5
013F:  BSF    05.0
....................   delay_us( 2 ); // for more than 1us minimum. 
0140:  GOTO   141
....................  } 
0141:  BCF    03.5
0142:  INCF   3F,F
0143:  GOTO   126
.................... } 
0144:  RETURN
....................  
.................... /*********************** read1wire() *********************************/ 
.................... /*This function reads the 8 -bit data via the 1-wire sensor. */ 
.................... /* */ 
.................... /*Parameters: */ 
.................... /*Returns: 8-bit (1-byte) data from sensor */ 
.................... /*********************************************************************/ 
....................  
.................... int onewire_read() 
.................... { 
....................  int count, data; 
....................  
....................  for (count=0; count<8; ++count) 
0145:  CLRF   3E
0146:  MOVF   3E,W
0147:  SUBLW  07
0148:  BTFSS  03.0
0149:  GOTO   167
....................  { 
....................   output_low(ONE_WIRE_PIN); 
014A:  BSF    03.5
014B:  BCF    05.0
014C:  BCF    03.5
014D:  BCF    05.0
....................   delay_us( 2 ); // pull 1-wire low to initiate read time-slot. 
014E:  GOTO   14F
....................   output_float(ONE_WIRE_PIN); // now let 1-wire float high, 
014F:  BSF    03.5
0150:  BSF    05.0
....................   delay_us( 8 ); // let device state stabilise, 
0151:  MOVLW  02
0152:  BCF    03.5
0153:  MOVWF  20
0154:  DECFSZ 20,F
0155:  GOTO   154
0156:  NOP
....................   shift_right(&data,1,input(ONE_WIRE_PIN)); // and load result. 
0157:  BSF    03.5
0158:  BSF    05.0
0159:  BCF    03.5
015A:  BTFSC  05.0
015B:  GOTO   15E
015C:  BCF    03.0
015D:  GOTO   15F
015E:  BSF    03.0
015F:  RRF    3F,F
....................   delay_us( 120 ); // wait until end of read slot. 
0160:  MOVLW  27
0161:  MOVWF  20
0162:  DECFSZ 20,F
0163:  GOTO   162
0164:  GOTO   165
....................  } 
0165:  INCF   3E,F
0166:  GOTO   146
....................  return( data ); 
0167:  MOVF   3F,W
0168:  MOVWF  21
.................... }  
0169:  RETURN
....................  
....................  
.................... //#define unit_on 
.................... #define unit_on    output_high(PIN_C0); 
.................... #define unit_off   output_low(PIN_C0); 
....................  
.................... #define ten_on     output_high (PIN_C1); 
.................... #define ten_off    output_low(PIN_C1); 
....................  
.................... #define thu_on     output_high (PIN_C2); 
.................... #define thu_off    output_low(PIN_C2); 
....................  
.................... const int8 digit[14]=~63,~6,~91,~79,~102,~109,~124,~7,~255,~103,~109,~121,~118,~56; 
....................  
.................... int8 i=0,data=0;int8 ii=0; 
.................... int16 value=0; 
.................... INT1 set_flagh=0,set_flagl=0; 
....................  
.................... INT1 SET_SET=0; 
.................... int16 min=350; 
.................... int16 max=370; 
....................  
.................... void display(int8 data) 
.................... { 
....................  int8 dat; 
.................... // dat = digit[data]; 
....................    dat = data; 
*
0041:  MOVF   3E,W
0042:  MOVWF  3F
....................    for(i=0;i<8;i++) 
0043:  CLRF   24
0044:  MOVF   24,W
0045:  SUBLW  07
0046:  BTFSS  03.0
0047:  GOTO   065
....................    { 
....................      if((dat & 0x01) == 0x01)DATA_HIGH; //Data High 
0048:  MOVF   3F,W
0049:  ANDLW  01
004A:  SUBLW  01
004B:  BTFSS  03.2
004C:  GOTO   052
004D:  BSF    03.5
004E:  BCF    07.3
004F:  BCF    03.5
0050:  BSF    07.3
....................      else DATA_LOW; //Data Low 
0051:  GOTO   056
0052:  BSF    03.5
0053:  BCF    07.3
0054:  BCF    03.5
0055:  BCF    07.3
....................      delay_us(1); 
0056:  NOP
....................      CLOCK_HIGH; 
0057:  BSF    03.5
0058:  BCF    07.4
0059:  BCF    03.5
005A:  BSF    07.4
....................      delay_us(1); 
005B:  NOP
....................      CLOCK_LOW; 
005C:  BSF    03.5
005D:  BCF    07.4
005E:  BCF    03.5
005F:  BCF    07.4
....................      delay_us(1); 
0060:  NOP
....................      dat >>= 1; //Shift one bit 
0061:  BCF    03.0
0062:  RRF    3F,F
....................    } 
0063:  INCF   24,F
0064:  GOTO   044
....................    ENABLE_HIGH; 
0065:  BSF    03.5
0066:  BCF    07.5
0067:  BCF    03.5
0068:  BSF    07.5
.................... } 
0069:  RETURN
....................  
.................... int8  thu,ten,unit; 
.................... int8 flag; 
....................  
.................... void display() 
.................... { 
....................  thu = (value/100)%10; 
*
007E:  MOVF   28,W
007F:  MOVWF  41
0080:  MOVF   27,W
0081:  MOVWF  40
0082:  CLRF   43
0083:  MOVLW  64
0084:  MOVWF  42
0085:  CALL   01C
0086:  MOVF   22,W
0087:  MOVWF  3F
0088:  MOVF   21,W
0089:  MOVWF  3E
008A:  MOVF   22,W
008B:  MOVWF  41
008C:  MOVF   21,W
008D:  MOVWF  40
008E:  CLRF   43
008F:  MOVLW  0A
0090:  MOVWF  42
0091:  CALL   01C
0092:  MOVF   20,W
0093:  MOVWF  2E
....................  ten = (value/10)%10; 
0094:  MOVF   28,W
0095:  MOVWF  41
0096:  MOVF   27,W
0097:  MOVWF  40
0098:  CLRF   43
0099:  MOVLW  0A
009A:  MOVWF  42
009B:  CALL   01C
009C:  MOVF   22,W
009D:  MOVWF  3F
009E:  MOVF   21,W
009F:  MOVWF  3E
00A0:  MOVF   22,W
00A1:  MOVWF  41
00A2:  MOVF   21,W
00A3:  MOVWF  40
00A4:  CLRF   43
00A5:  MOVLW  0A
00A6:  MOVWF  42
00A7:  CALL   01C
00A8:  MOVF   20,W
00A9:  MOVWF  2F
....................  unit = (value/1)%10; 
00AA:  MOVF   28,W
00AB:  MOVWF  41
00AC:  MOVF   27,W
00AD:  MOVWF  40
00AE:  CLRF   43
00AF:  MOVLW  0A
00B0:  MOVWF  42
00B1:  CALL   01C
00B2:  MOVF   20,W
00B3:  MOVWF  30
....................  
....................   
....................  if (set_flagh==1) 
00B4:  BTFSS  29.0
00B5:  GOTO   0BC
....................  { 
....................    thu=10; 
00B6:  MOVLW  0A
00B7:  MOVWF  2E
....................    ten=11; 
00B8:  MOVLW  0B
00B9:  MOVWF  2F
....................    unit=12; 
00BA:  MOVLW  0C
00BB:  MOVWF  30
....................  } 
....................  if (set_flagl==1) 
00BC:  BTFSS  29.1
00BD:  GOTO   0C4
....................  { 
....................    thu=10; 
00BE:  MOVLW  0A
00BF:  MOVWF  2E
....................    ten=11; 
00C0:  MOVLW  0B
00C1:  MOVWF  2F
....................    unit=13; 
00C2:  MOVLW  0D
00C3:  MOVWF  30
....................  } 
....................  if (SET_SET==1) 
00C4:  BTFSS  29.2
00C5:  GOTO   0CB
....................  { 
....................   thu  =10; 
00C6:  MOVLW  0A
00C7:  MOVWF  2E
....................   ten  =11; 
00C8:  MOVLW  0B
00C9:  MOVWF  2F
....................   unit =11; 
00CA:  MOVWF  30
....................  } 
....................    
....................  unit_off; 
00CB:  BSF    03.5
00CC:  BCF    07.0
00CD:  BCF    03.5
00CE:  BCF    07.0
....................  ten_off; 
00CF:  BSF    03.5
00D0:  BCF    07.1
00D1:  BCF    03.5
00D2:  BCF    07.1
....................  thu_off 
00D3:  BSF    03.5
00D4:  BCF    07.2
00D5:  BCF    03.5
00D6:  BCF    07.2
....................      
....................   unit = digit[unit]; 
00D7:  MOVF   30,W
00D8:  CALL   00A
00D9:  MOVWF  21
00DA:  MOVWF  30
....................   unit = unit | 0b10000000; 
00DB:  BSF    30.7
....................   display(unit); 
00DC:  MOVF   30,W
00DD:  MOVWF  3E
00DE:  CALL   041
....................   unit_on; 
00DF:  BSF    03.5
00E0:  BCF    07.0
00E1:  BCF    03.5
00E2:  BSF    07.0
....................   delay_mS(1); 
00E3:  MOVLW  01
00E4:  MOVWF  3E
00E5:  CALL   06A
....................   unit_off; 
00E6:  BSF    03.5
00E7:  BCF    07.0
00E8:  BCF    03.5
00E9:  BCF    07.0
....................    
....................   ten = digit[ten]; 
00EA:  MOVF   2F,W
00EB:  CALL   00A
00EC:  MOVWF  21
00ED:  MOVWF  2F
....................   ten = ten &  0b01111111; 
00EE:  BCF    2F.7
....................   display(ten); 
00EF:  MOVF   2F,W
00F0:  MOVWF  3E
00F1:  CALL   041
....................   ten_on; 
00F2:  BSF    03.5
00F3:  BCF    07.1
00F4:  BCF    03.5
00F5:  BSF    07.1
....................   delay_ms(1); 
00F6:  MOVLW  01
00F7:  MOVWF  3E
00F8:  CALL   06A
....................   ten_off; 
00F9:  BSF    03.5
00FA:  BCF    07.1
00FB:  BCF    03.5
00FC:  BCF    07.1
....................    
....................   thu = digit[thu]; 
00FD:  MOVF   2E,W
00FE:  CALL   00A
00FF:  MOVWF  21
0100:  MOVWF  2E
....................   display(thu); 
0101:  MOVF   2E,W
0102:  MOVWF  3E
0103:  CALL   041
....................   thu_on; 
0104:  BSF    03.5
0105:  BCF    07.2
0106:  BCF    03.5
0107:  BSF    07.2
....................   delay_ms(1); 
0108:  MOVLW  01
0109:  MOVWF  3E
010A:  CALL   06A
....................   thu_off 
010B:  BSF    03.5
010C:  BCF    07.2
010D:  BCF    03.5
010E:  BCF    07.2
.................... } 
010F:  RETURN
....................  
....................  
.................... #include <ds18B20.c> 
.................... int1 leak = 1; 
....................  
.................... int16 ds1820_read() 
.................... { 
*
016A:  CLRF   37
....................  int8 busy=0, temp1, temp2; 
....................  signed int16 temp3; 
....................  int16 result; 
....................  display(); 
016B:  CALL   07E
....................  onewire_reset(); 
016C:  CALL   110
....................  display(); 
016D:  CALL   07E
....................  onewire_write(0xCC); 
016E:  MOVLW  CC
016F:  MOVWF  3E
0170:  CALL   125
....................  display(); 
0171:  CALL   07E
....................  onewire_write(0x44); 
0172:  MOVLW  44
0173:  MOVWF  3E
0174:  CALL   125
....................  
....................  while (busy == 0) 
....................  { 
0175:  MOVF   37,F
0176:  BTFSS  03.2
0177:  GOTO   17D
....................   busy = onewire_read(); 
0178:  CALL   145
0179:  MOVF   21,W
017A:  MOVWF  37
....................   display(); 
017B:  CALL   07E
....................  } 
017C:  GOTO   175
....................  onewire_reset(); 
017D:  CALL   110
....................  display(); 
017E:  CALL   07E
....................  onewire_write(0xCC); 
017F:  MOVLW  CC
0180:  MOVWF  3E
0181:  CALL   125
....................  display(); 
0182:  CALL   07E
....................  onewire_write(0xBE); 
0183:  MOVLW  BE
0184:  MOVWF  3E
0185:  CALL   125
....................  display(); 
0186:  CALL   07E
....................  temp1 = onewire_read(); 
0187:  CALL   145
0188:  MOVF   21,W
0189:  MOVWF  38
....................  display(); 
018A:  CALL   07E
....................  temp2 = onewire_read(); 
018B:  CALL   145
018C:  MOVF   21,W
018D:  MOVWF  39
....................  display(); 
018E:  CALL   07E
....................  temp3 = make16(temp2, temp1); 
018F:  MOVF   39,W
0190:  MOVWF  3B
0191:  MOVF   38,W
0192:  MOVWF  3A
.................... // display(); 
.................... // result = (float) temp3 / 2;     //Calculation for DS18S20 with 0.5 deg C resolution 
.................... // result = (float) temp3 / 16.0;  //Calculation for DS18B20 with 0.1 deg C resolution 
....................  
....................  result =  temp3 * 5;   // for  .5 deg 
0193:  MOVF   3B,W
0194:  MOVWF  3F
0195:  MOVF   3A,W
0196:  MOVWF  3E
0197:  CLRF   41
0198:  MOVLW  05
0199:  MOVWF  40
*
01C7:  MOVF   21,W
01C8:  MOVWF  3C
01C9:  MOVF   22,W
01CA:  MOVWF  3D
.................... // result =  temp3; 
....................  display(); 
01CB:  CALL   07E
.................... // delay_ms(200); 
....................  
....................  return(result ); 
01CC:  MOVF   3C,W
01CD:  MOVWF  21
01CE:  MOVF   3D,W
01CF:  MOVWF  22
.................... } 
01D0:  RETURN
....................  
.................... int32 counter=0; 
.................... int1 delay_flag =1; 
.................... int1 relay_on_flag =0; 
.................... void main() 
.................... { 
01D1:  CLRF   04
01D2:  MOVLW  1F
01D3:  ANDWF  03,F
01D4:  CLRF   24
01D5:  CLRF   25
01D6:  CLRF   26
01D7:  CLRF   28
01D8:  CLRF   27
01D9:  BCF    29.0
01DA:  BCF    29.1
01DB:  BCF    29.2
01DC:  MOVLW  01
01DD:  MOVWF  2B
01DE:  MOVLW  5E
01DF:  MOVWF  2A
01E0:  MOVLW  01
01E1:  MOVWF  2D
01E2:  MOVLW  72
01E3:  MOVWF  2C
01E4:  BSF    29.3
01E5:  CLRF   35
01E6:  CLRF   34
01E7:  CLRF   33
01E8:  CLRF   32
01E9:  BSF    29.4
01EA:  BCF    29.5
01EB:  BCF    1F.6
01EC:  MOVLW  00
01ED:  BSF    03.5
01EE:  MOVWF  11
01EF:  MOVLW  07
01F0:  BCF    03.5
01F1:  MOVWF  19
....................   relay_off; 
01F2:  BSF    03.5
01F3:  BCF    05.1
01F4:  BCF    03.5
01F5:  BSF    05.1
....................   if (read_eeprom(10) == 'O') 
01F6:  MOVLW  0A
01F7:  BSF    03.5
01F8:  MOVWF  1B
01F9:  BCF    1C.7
01FA:  BSF    1C.0
01FB:  MOVF   1A,W
01FC:  SUBLW  4F
01FD:  BTFSS  03.2
01FE:  GOTO   220
....................   { 
....................    Lo(max)=read_eeprom(1); 
01FF:  MOVLW  01
0200:  MOVWF  1B
0201:  BCF    1C.7
0202:  BSF    1C.0
0203:  MOVF   1A,W
0204:  BCF    03.5
0205:  MOVWF  2C
....................    Hi(max)=read_eeprom(2); 
0206:  MOVLW  02
0207:  BSF    03.5
0208:  MOVWF  1B
0209:  BCF    1C.7
020A:  BSF    1C.0
020B:  MOVF   1A,W
020C:  BCF    03.5
020D:  MOVWF  2D
....................  
....................    Lo(min)=read_eeprom(3); 
020E:  MOVLW  03
020F:  BSF    03.5
0210:  MOVWF  1B
0211:  BCF    1C.7
0212:  BSF    1C.0
0213:  MOVF   1A,W
0214:  BCF    03.5
0215:  MOVWF  2A
....................    Hi(min)=read_eeprom(4);  
0216:  MOVLW  04
0217:  BSF    03.5
0218:  MOVWF  1B
0219:  BCF    1C.7
021A:  BSF    1C.0
021B:  MOVF   1A,W
021C:  BCF    03.5
021D:  MOVWF  2B
....................   } 
....................   ELSE  
021E:  GOTO   242
021F:  BSF    03.5
....................   { 
....................     min=350; 
0220:  MOVLW  01
0221:  BCF    03.5
0222:  MOVWF  2B
0223:  MOVLW  5E
0224:  MOVWF  2A
....................     max=370;       
0225:  MOVLW  01
0226:  MOVWF  2D
0227:  MOVLW  72
0228:  MOVWF  2C
....................     write_eeprom(10,'O'); 
0229:  MOVLW  0A
022A:  BSF    03.5
022B:  MOVWF  1B
022C:  MOVLW  4F
022D:  MOVWF  1A
022E:  BCF    1C.7
022F:  BSF    1C.2
0230:  BCF    03.5
0231:  MOVF   0B,W
0232:  MOVWF  20
0233:  BCF    0B.7
0234:  BSF    03.5
0235:  MOVLW  55
0236:  MOVWF  1D
0237:  MOVLW  AA
0238:  MOVWF  1D
0239:  BSF    1C.1
023A:  BTFSC  1C.1
023B:  GOTO   23A
023C:  BCF    1C.2
023D:  BCF    03.5
023E:  MOVF   20,W
023F:  IORWF  0B,F
....................     RESET_CPU(); 
0240:  CLRF   0A
0241:  GOTO   000
....................   } 
.................... //int16 val; 
....................    set_tris_c(0xff); 
0242:  MOVLW  FF
0243:  BSF    03.5
0244:  MOVWF  07
....................    set_tris_a(0xff); 
0245:  MOVWF  05
.................... //   set_tris_a(0x2f); 
....................    setup_comparator(NC_NC_NC_NC); 
0246:  MOVLW  07
0247:  BCF    03.5
0248:  MOVWF  19
0249:  BSF    03.5
024A:  MOVF   05,W
024B:  MOVWF  05
024C:  MOVLW  03
024D:  BCF    03.5
024E:  MOVWF  20
024F:  DECFSZ 20,F
0250:  GOTO   24F
0251:  MOVF   19,W
0252:  BCF    0C.3
....................    SETUP_ADC_PORTS(NO_ANALOGS); 
0253:  BCF    1F.6
0254:  MOVLW  00
0255:  BSF    03.5
0256:  MOVWF  11
....................      
.................... relay_off; 
0257:  BCF    05.1
0258:  BCF    03.5
0259:  BSF    05.1
.................... ds1820_read(); 
025A:  CALL   16A
.................... ds1820_read(); 
025B:  CALL   16A
....................  
.................... int8 counter123;    
....................    while(TRUE) 
....................    { 
....................      counter123 ++;      
025C:  INCF   36,F
....................      if (counter123 > 14) 
025D:  MOVF   36,W
025E:  SUBLW  0E
025F:  BTFSC  03.0
0260:  GOTO   267
....................      { 
....................       counter123=0; 
0261:  CLRF   36
....................       value =  (ds1820_read());      
0262:  CALL   16A
0263:  MOVF   22,W
0264:  MOVWF  28
0265:  MOVF   21,W
0266:  MOVWF  27
....................      } 
....................      display(); 
0267:  CALL   07E
....................  
....................      if (value <= min) 
0268:  MOVF   28,W
0269:  SUBWF  2B,W
026A:  BTFSS  03.0
026B:  GOTO   277
026C:  BTFSS  03.2
026D:  GOTO   272
026E:  MOVF   27,W
026F:  SUBWF  2A,W
0270:  BTFSS  03.0
0271:  GOTO   277
....................      {           
....................       relay_off;      
0272:  BSF    03.5
0273:  BCF    05.1
0274:  BCF    03.5
0275:  BSF    05.1
....................       delay_flag = 1; 
0276:  BSF    29.4
....................      } 
....................      if (value >= max && relay_on_flag)  
0277:  MOVF   2D,W
0278:  SUBWF  28,W
0279:  BTFSS  03.0
027A:  GOTO   28D
027B:  BTFSS  03.2
027C:  GOTO   281
027D:  MOVF   2C,W
027E:  SUBWF  27,W
027F:  BTFSS  03.0
0280:  GOTO   28D
0281:  BTFSS  29.5
0282:  GOTO   28D
....................      { 
....................       relay_on; 
0283:  BSF    03.5
0284:  BCF    05.1
0285:  BCF    03.5
0286:  BCF    05.1
....................       counter = 0; 
0287:  CLRF   35
0288:  CLRF   34
0289:  CLRF   33
028A:  CLRF   32
....................       delay_flag = 0; 
028B:  BCF    29.4
....................       relay_on_flag = 0; 
028C:  BCF    29.5
....................      } 
....................       
....................   if (delay_flag) 
028D:  BTFSS  29.4
028E:  GOTO   2A9
....................       { 
....................        counter++; 
028F:  MOVLW  01
0290:  ADDWF  32,F
0291:  BTFSC  03.0
0292:  INCF   33,F
0293:  BTFSC  03.2
0294:  INCF   34,F
0295:  BTFSC  03.2
0296:  INCF   35,F
....................        if (counter > 3000) // 3000 
0297:  MOVF   35,F
0298:  BTFSS  03.2
0299:  GOTO   2A8
029A:  MOVF   34,F
029B:  BTFSS  03.2
029C:  GOTO   2A8
029D:  MOVF   33,W
029E:  SUBLW  0A
029F:  BTFSC  03.0
02A0:  GOTO   2A9
02A1:  XORLW  FF
02A2:  BTFSS  03.2
02A3:  GOTO   2A8
02A4:  MOVF   32,W
02A5:  SUBLW  B8
02A6:  BTFSC  03.0
02A7:  GOTO   2A9
....................        { 
....................          relay_on_flag = 1;         
02A8:  BSF    29.5
....................        } 
....................       }    
.................... //=====================      
....................    if (SET_BUTTON == 1) 
02A9:  BTFSS  05.2
02AA:  GOTO   3F2
....................    { 
....................      set_flagh=1; 
02AB:  BSF    29.0
....................      for (ii=0; ii < 100; ii++) 
02AC:  CLRF   26
02AD:  MOVF   26,W
02AE:  SUBLW  63
02AF:  BTFSS  03.0
02B0:  GOTO   2B7
....................            { 
....................              display(); 
02B1:  CALL   07E
....................              DELAY_MS(3); 
02B2:  MOVLW  03
02B3:  MOVWF  3E
02B4:  CALL   06A
....................            } 
02B5:  INCF   26,F
02B6:  GOTO   2AD
....................      set_flagh=0; 
02B7:  BCF    29.0
....................      while(SET_BUTTON == 1) 
....................      { 
02B8:  BTFSS  05.2
02B9:  GOTO   2BC
....................              display(); 
02BA:  CALL   07E
....................      } 
02BB:  GOTO   2B8
....................      VALUE = MAX ; 
02BC:  MOVF   2D,W
02BD:  MOVWF  28
02BE:  MOVF   2C,W
02BF:  MOVWF  27
....................      while(1) 
....................      { 
....................        if (up_button==1) 
02C0:  BTFSS  05.3
02C1:  GOTO   2DF
....................        { 
....................         if (value > 999) 
02C2:  MOVF   28,W
02C3:  SUBLW  02
02C4:  BTFSC  03.0
02C5:  GOTO   2CF
02C6:  XORLW  FF
02C7:  BTFSS  03.2
02C8:  GOTO   2CD
02C9:  MOVF   27,W
02CA:  SUBLW  E7
02CB:  BTFSC  03.0
02CC:  GOTO   2CF
....................         { 
....................          value=0; 
02CD:  CLRF   28
02CE:  CLRF   27
....................         } 
....................         value+=5; 
02CF:  MOVLW  05
02D0:  ADDWF  27,F
02D1:  BTFSC  03.0
02D2:  INCF   28,F
....................         for (ii=0; ii<=25; ii++) 
02D3:  CLRF   26
02D4:  MOVF   26,W
02D5:  SUBLW  19
02D6:  BTFSS  03.0
02D7:  GOTO   2DE
....................            { 
....................              display(); 
02D8:  CALL   07E
....................              DELAY_MS(3); 
02D9:  MOVLW  03
02DA:  MOVWF  3E
02DB:  CALL   06A
....................            } 
02DC:  INCF   26,F
02DD:  GOTO   2D4
....................        } 
....................        else if (down_button==1) 
02DE:  GOTO   2FC
02DF:  BTFSS  05.4
02E0:  GOTO   2FC
....................        { 
....................         if (value==0) 
02E1:  MOVF   27,F
02E2:  BTFSS  03.2
02E3:  GOTO   2EB
02E4:  MOVF   28,F
02E5:  BTFSS  03.2
02E6:  GOTO   2EB
....................         { 
....................          value=999; 
02E7:  MOVLW  03
02E8:  MOVWF  28
02E9:  MOVLW  E7
02EA:  MOVWF  27
....................         } 
....................         value-=5; 
02EB:  MOVLW  05
02EC:  SUBWF  27,F
02ED:  MOVLW  00
02EE:  BTFSS  03.0
02EF:  MOVLW  01
02F0:  SUBWF  28,F
....................         for (ii=0; ii<=25; ii++) 
02F1:  CLRF   26
02F2:  MOVF   26,W
02F3:  SUBLW  19
02F4:  BTFSS  03.0
02F5:  GOTO   2FC
....................            { 
....................              display(); 
02F6:  CALL   07E
....................              DELAY_MS(3); 
02F7:  MOVLW  03
02F8:  MOVWF  3E
02F9:  CALL   06A
....................            } 
02FA:  INCF   26,F
02FB:  GOTO   2F2
....................        } 
....................       if (set_button==1) 
02FC:  BTFSS  05.2
02FD:  GOTO   335
....................       { 
....................        max=value; 
02FE:  MOVF   28,W
02FF:  MOVWF  2D
0300:  MOVF   27,W
0301:  MOVWF  2C
....................        write_eeprom(1,Lo(max)); 
0302:  MOVLW  01
0303:  BSF    03.5
0304:  MOVWF  1B
0305:  BCF    03.5
0306:  MOVF   2C,W
0307:  BSF    03.5
0308:  MOVWF  1A
0309:  BCF    1C.7
030A:  BSF    1C.2
030B:  BCF    03.5
030C:  MOVF   0B,W
030D:  MOVWF  20
030E:  BCF    0B.7
030F:  BSF    03.5
0310:  MOVLW  55
0311:  MOVWF  1D
0312:  MOVLW  AA
0313:  MOVWF  1D
0314:  BSF    1C.1
0315:  BTFSC  1C.1
0316:  GOTO   315
0317:  BCF    1C.2
0318:  BCF    03.5
0319:  MOVF   20,W
031A:  IORWF  0B,F
....................        write_eeprom(2,Hi(max)); 
031B:  MOVLW  02
031C:  BSF    03.5
031D:  MOVWF  1B
031E:  BCF    03.5
031F:  MOVF   2D,W
0320:  BSF    03.5
0321:  MOVWF  1A
0322:  BCF    1C.7
0323:  BSF    1C.2
0324:  BCF    03.5
0325:  MOVF   0B,W
0326:  MOVWF  20
0327:  BCF    0B.7
0328:  BSF    03.5
0329:  MOVLW  55
032A:  MOVWF  1D
032B:  MOVLW  AA
032C:  MOVWF  1D
032D:  BSF    1C.1
032E:  BTFSC  1C.1
032F:  GOTO   32E
0330:  BCF    1C.2
0331:  BCF    03.5
0332:  MOVF   20,W
0333:  IORWF  0B,F
....................        break; 
0334:  GOTO   337
....................       } 
....................        display(); 
0335:  CALL   07E
....................      } 
0336:  GOTO   2C0
....................     //===================== 
....................      set_flagl=1; 
0337:  BSF    29.1
....................      for (ii=0; ii<=100; ii++) 
0338:  CLRF   26
0339:  MOVF   26,W
033A:  SUBLW  64
033B:  BTFSS  03.0
033C:  GOTO   343
....................            { 
....................              display(); 
033D:  CALL   07E
....................              DELAY_MS(3); 
033E:  MOVLW  03
033F:  MOVWF  3E
0340:  CALL   06A
....................            } 
0341:  INCF   26,F
0342:  GOTO   339
....................      set_flagl=0; 
0343:  BCF    29.1
....................      while(SET_BUTTON == 1) 
....................      { 
0344:  BTFSS  05.2
0345:  GOTO   348
....................              display(); 
0346:  CALL   07E
....................      } 
0347:  GOTO   344
.................... //     Lo(value)=read_eeprom(3); 
.................... //     Hi(value)=read_eeprom(4); 
....................      VALUE = MIN ; 
0348:  MOVF   2B,W
0349:  MOVWF  28
034A:  MOVF   2A,W
034B:  MOVWF  27
....................      while(1) 
....................      { 
....................        if (up_button==1) 
034C:  BTFSS  05.3
034D:  GOTO   36B
....................        { 
....................         if (value > 999) 
034E:  MOVF   28,W
034F:  SUBLW  02
0350:  BTFSC  03.0
0351:  GOTO   35B
0352:  XORLW  FF
0353:  BTFSS  03.2
0354:  GOTO   359
0355:  MOVF   27,W
0356:  SUBLW  E7
0357:  BTFSC  03.0
0358:  GOTO   35B
....................         { 
....................          value=0; 
0359:  CLRF   28
035A:  CLRF   27
....................         } 
....................         value+=5; 
035B:  MOVLW  05
035C:  ADDWF  27,F
035D:  BTFSC  03.0
035E:  INCF   28,F
....................            for (ii=0; ii<=25; ii++) 
035F:  CLRF   26
0360:  MOVF   26,W
0361:  SUBLW  19
0362:  BTFSS  03.0
0363:  GOTO   36A
....................            { 
....................              display(); 
0364:  CALL   07E
....................              DELAY_MS(3); 
0365:  MOVLW  03
0366:  MOVWF  3E
0367:  CALL   06A
....................            } 
0368:  INCF   26,F
0369:  GOTO   360
....................        } 
....................        else if (down_button==1) 
036A:  GOTO   388
036B:  BTFSS  05.4
036C:  GOTO   388
....................        { 
....................         if (value==0) 
036D:  MOVF   27,F
036E:  BTFSS  03.2
036F:  GOTO   377
0370:  MOVF   28,F
0371:  BTFSS  03.2
0372:  GOTO   377
....................         { 
....................          value=999; 
0373:  MOVLW  03
0374:  MOVWF  28
0375:  MOVLW  E7
0376:  MOVWF  27
....................         } 
....................         value-=5; 
0377:  MOVLW  05
0378:  SUBWF  27,F
0379:  MOVLW  00
037A:  BTFSS  03.0
037B:  MOVLW  01
037C:  SUBWF  28,F
....................         for (ii=0; ii<=25; ii++) 
037D:  CLRF   26
037E:  MOVF   26,W
037F:  SUBLW  19
0380:  BTFSS  03.0
0381:  GOTO   388
....................            { 
....................              display(); 
0382:  CALL   07E
....................              DELAY_MS(3); 
0383:  MOVLW  03
0384:  MOVWF  3E
0385:  CALL   06A
....................            } 
0386:  INCF   26,F
0387:  GOTO   37E
....................        } 
....................       if (set_button==1) 
0388:  BTFSS  05.2
0389:  GOTO   3F0
....................       { 
....................        min=value; 
038A:  MOVF   28,W
038B:  MOVWF  2B
038C:  MOVF   27,W
038D:  MOVWF  2A
....................        write_eeprom(3,Lo(min)); 
038E:  MOVLW  03
038F:  BSF    03.5
0390:  MOVWF  1B
0391:  BCF    03.5
0392:  MOVF   2A,W
0393:  BSF    03.5
0394:  MOVWF  1A
0395:  BCF    1C.7
0396:  BSF    1C.2
0397:  BCF    03.5
0398:  MOVF   0B,W
0399:  MOVWF  20
039A:  BCF    0B.7
039B:  BSF    03.5
039C:  MOVLW  55
039D:  MOVWF  1D
039E:  MOVLW  AA
039F:  MOVWF  1D
03A0:  BSF    1C.1
03A1:  BTFSC  1C.1
03A2:  GOTO   3A1
03A3:  BCF    1C.2
03A4:  BCF    03.5
03A5:  MOVF   20,W
03A6:  IORWF  0B,F
....................        write_eeprom(4,Hi(min)); 
03A7:  MOVLW  04
03A8:  BSF    03.5
03A9:  MOVWF  1B
03AA:  BCF    03.5
03AB:  MOVF   2B,W
03AC:  BSF    03.5
03AD:  MOVWF  1A
03AE:  BCF    1C.7
03AF:  BSF    1C.2
03B0:  BCF    03.5
03B1:  MOVF   0B,W
03B2:  MOVWF  20
03B3:  BCF    0B.7
03B4:  BSF    03.5
03B5:  MOVLW  55
03B6:  MOVWF  1D
03B7:  MOVLW  AA
03B8:  MOVWF  1D
03B9:  BSF    1C.1
03BA:  BTFSC  1C.1
03BB:  GOTO   3BA
03BC:  BCF    1C.2
03BD:  BCF    03.5
03BE:  MOVF   20,W
03BF:  IORWF  0B,F
....................             for (ii=0; ii < 100; ii++) 
03C0:  CLRF   26
03C1:  MOVF   26,W
03C2:  SUBLW  63
03C3:  BTFSS  03.0
03C4:  GOTO   3CB
....................            { 
....................              display(); 
03C5:  CALL   07E
....................              DELAY_MS(3); 
03C6:  MOVLW  03
03C7:  MOVWF  3E
03C8:  CALL   06A
....................            } 
03C9:  INCF   26,F
03CA:  GOTO   3C1
....................            write_eeprom(10,'O'); 
03CB:  MOVLW  0A
03CC:  BSF    03.5
03CD:  MOVWF  1B
03CE:  MOVLW  4F
03CF:  MOVWF  1A
03D0:  BCF    1C.7
03D1:  BSF    1C.2
03D2:  BCF    03.5
03D3:  MOVF   0B,W
03D4:  MOVWF  20
03D5:  BCF    0B.7
03D6:  BSF    03.5
03D7:  MOVLW  55
03D8:  MOVWF  1D
03D9:  MOVLW  AA
03DA:  MOVWF  1D
03DB:  BSF    1C.1
03DC:  BTFSC  1C.1
03DD:  GOTO   3DC
03DE:  BCF    1C.2
03DF:  BCF    03.5
03E0:  MOVF   20,W
03E1:  IORWF  0B,F
....................            SET_SET=1; 
03E2:  BSF    29.2
....................            for (ii=0; ii < 100; ii++) 
03E3:  CLRF   26
03E4:  MOVF   26,W
03E5:  SUBLW  63
03E6:  BTFSS  03.0
03E7:  GOTO   3EE
....................            {             
....................             display(); 
03E8:  CALL   07E
....................             DELAY_MS(3); 
03E9:  MOVLW  03
03EA:  MOVWF  3E
03EB:  CALL   06A
....................            } 
03EC:  INCF   26,F
03ED:  GOTO   3E4
....................            SET_SET=0; 
03EE:  BCF    29.2
....................        break; 
03EF:  GOTO   3F2
....................       } 
....................      display(); 
03F0:  CALL   07E
....................     } 
03F1:  GOTO   34C
....................    } 
....................   } 
03F2:  GOTO   25C
.................... } 
03F3:  SLEEP

Configuration Fuses:
   Word  1: 3F84   INTRC_IO NOWDT PUT NOMCLR NOBROWNOUT NOPROTECT NOCPD
